package main;import "fmt";import "math";import "math/big";import "os";import "regexp";import "strconv";import "strings";func clear(inpstr string)string{str:=strings.ReplaceAll(strings.ToLower(inpstr)," ","");str=strings.ReplaceAll(str,"ï¿½","i");str=strings.ReplaceAll(str,"^^","^");str=strings.ReplaceAll(str,"**","^");str=strings.ReplaceAll(str,"[","(");str=strings.ReplaceAll(str,"]",")");str=strings.ReplaceAll(str,"pi",strconv.FormatFloat(math.Pi,'f',-1,64));return strings.ReplaceAll(str,",",".")};func main(){if len(os.Args)>1{fmt.Println("\033[33m"+calc(strings.Join(os.Args[1:]," "))+"\033[0m")} else {for{fmt.Print("> ");var inpstr string;fmt.Scanln(&inpstr);fmt.Println("\033[33m"+calc(inpstr)+"\033[0m\n")}}};func factorial(input string)string{num,err:=strconv.Atoi(strings.ReplaceAll(input,".0",""));if err!=nil {panic(err)};result:=big.NewInt(1);for i:=2; i <= num; i++ {result=result.Mul(result,big.NewInt(int64(i)))};return result.String()};func clear2(str *string){re:=regexp.MustCompile(`\+\-`);for re.FindString(*str)!=""{match:=re.FindString(*str);*str=strings.Replace(*str,match,"-",1)};re=regexp.MustCompile(`\-\-`);for re.FindString(*str)!=""{match:=re.FindString(*str);*str=strings.Replace(*str,match,"+",1)}};func calc(inpstr string)string{str:=clear(inpstr);clear2(&str);re:=regexp.MustCompile(`\([^\(,\)]{1,}\)`);for re.FindString(str)!=""{match:=re.FindString(str);str=strings.Replace(str,match,calc(match[1:len(match)-1]),1)};clear2(&str);uslu:=regexp.MustCompile(`[^-+*/\^\(\)]{1,}\^[^-+*/\^\(\)]{1,}`);fact:=regexp.MustCompile(`[^-+*/\^\(\)]{1,}!`);spre:=regexp.MustCompile(`[^-+*/\^\(\)]{1,}[*/][^-+*/\^\(\)]{1,}`);spre2:=regexp.MustCompile(`[^-+*/\^\(\)]{1,}[-+][^-+*/\^\(\)]{1,}`);for uslu.FindString(str)!=""{match:=uslu.FindString(str);str=strings.Replace(str,match,simpleMath(match),1)};clear2(&str);for fact.FindString(str)!=""{match:=fact.FindString(str);str=strings.Replace(str,match,factorial(match[:len(match)-1]),1)};clear2(&str);for spre.FindString(str)!=""{match:=spre.FindString(str);str=strings.Replace(str,match,simpleMath(match),1)};clear2(&str);for spre2.FindString(str)!=""{match:=spre2.FindString(str);str=strings.Replace(str,match,simpleMath(match),1)};clear2(&str);return str};func simpleMath(inpstr string)string{sep:="";if strings.Contains(inpstr,"^") {sep="^"} else if strings.Contains(inpstr,"*") {sep="*"} else if strings.Contains(inpstr,"/") {sep="/"} else if strings.Contains(inpstr,"+") {sep="+"} else if strings.Contains(inpstr,"-") {sep="-"};numbers:=strings.Split(inpstr,sep);num1,_:=strconv.ParseFloat(numbers[0],64);num2,_:=strconv.ParseFloat(numbers[1],64);switch sep {case "+":return strconv.FormatFloat(num1+num2,'f',-1,64);case "-":return strconv.FormatFloat(num1-num2,'f',-1,64);case "*":return strconv.FormatFloat(num1*num2,'f',-1,64);case "/":return strconv.FormatFloat(num1/num2,'f',-1,64);default:return strconv.FormatFloat(math.Pow(num1,num2),'f',-1,64)}}